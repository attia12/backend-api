package com.example.spring_security_asymetric_encrytion.auth.impl;

import com.example.spring_security_asymetric_encrytion.auth.AuthenticationService;
import com.example.spring_security_asymetric_encrytion.auth.request.AuthenticationRequest;
import com.example.spring_security_asymetric_encrytion.auth.request.RefreshRequest;
import com.example.spring_security_asymetric_encrytion.auth.request.RegistrationRequest;
import com.example.spring_security_asymetric_encrytion.auth.response.AuthenticationResponse;
import com.example.spring_security_asymetric_encrytion.exception.BusinessException;
import com.example.spring_security_asymetric_encrytion.exception.ErrorCode;
import com.example.spring_security_asymetric_encrytion.role.Role;
import com.example.spring_security_asymetric_encrytion.role.RoleRepository;
import com.example.spring_security_asymetric_encrytion.security.JwtService;
import com.example.spring_security_asymetric_encrytion.user.User;
import com.example.spring_security_asymetric_encrytion.user.UserMapper;
import com.example.spring_security_asymetric_encrytion.user.UserRepository;
import jakarta.persistence.EntityNotFoundException;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class AuthenticationServiceImpl implements AuthenticationService {
    private final AuthenticationManager authenticationManager;
    private final JwtService jwtService;
    private final UserRepository userRepository;
    private final RoleRepository roleRepository;
    private final UserMapper userMapper;
    @Override
    public AuthenticationResponse login(AuthenticationRequest request) {
       final Authentication auth = this.authenticationManager.authenticate(
               new UsernamePasswordAuthenticationToken(
                       request.getEmail(),
                       request.getPassword()
               )
       );
       final User user = (User) auth.getPrincipal();
       final String accessToken = this.jwtService.generateAccessToken(user.getUsername());
       final String refreshToken=this.jwtService.refreshAccessToken(user.getUsername());

        return AuthenticationResponse.builder()
                .accessToken(accessToken)
                .refreshToken(refreshToken)
                .tokenType("Bearer")
                .build();
    }

    @Override
    @Transactional
    public void register(RegistrationRequest request) {
        checkUserEmail(request.getEmail());
        checkUserPhoneNumber(request.getPhoneNumber());
        checkPassword(request.getPassword(), request.getConfirmPassword());

        final Role userRole=this.roleRepository.findByName("ROLE_USER")
                .orElseThrow(() -> new EntityNotFoundException("Role user does not exist"));
        final List<Role> roles =new ArrayList<>();
        roles.add(userRole);
        final User user = this.userMapper.toUser(request);
        user.setRoles(roles);
        log.debug("Saving user {}", user);
        this.userRepository.save(user);
        // in case you don t have cascade option in many to many 

//        final List<User> users = new ArrayList<>();
//        users.add(user);
//        userRole.setUsers(users);
//
//        this.roleRepository.save(userRole);
    }



    @Override
    public AuthenticationResponse refreshToken(RefreshRequest req) {
        return null;
    }

    private void checkPassword(String password, String confirmPassword) {
        if(password == null || !password.equals(confirmPassword))
        {
            throw new BusinessException(ErrorCode.PASSWORD_MISMATCH);
        }
    }

    private void checkUserPhoneNumber(String phoneNumber) {
        final boolean phoneNumberExists = this.userRepository.existsByPhoneNumber(phoneNumber);
        if (phoneNumberExists) {
            throw new BusinessException(ErrorCode.PHONE_ALREADY_EXISTS);
        }
    }

    private void checkUserEmail(String email) {
        final boolean emailExists = this.userRepository.existsByEmailIgnoreCase(email);
        if (emailExists) {
            throw new BusinessException(ErrorCode.EMAIL_ALREADY_EXISTS);
        }

    }
}
